from regex_parser import tokenize, insert_concat, to_postfix
from syntax_tree import SyntaxTree
from nfa_dfa import DFA, DFAState
from dfa_min import DFAOptimizer
from regex_engine import Regex


pattern = "(a|bc)*|(a|bc)*ba(c)*"

tokens = tokenize(pattern)
print("üì• –¢–æ–∫–µ–Ω—ã:", tokens)

tokens_concat = insert_concat(tokens)
print("‚ûï –° –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–µ–π:", tokens_concat)

postfix = to_postfix(tokens_concat)
print("üì§ –ü–æ—Å—Ç—Ñ–∏–∫—Å:", postfix)

tree = SyntaxTree(postfix)
print("üå≥ –î–µ—Ä–µ–≤–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ, root.label:", tree.root.label)


 
dfa = DFA(tree)

dfa.print_dfa_console()


regex = Regex("(a|bc)*|(a|bc)*ba(c)*").compile()

print("üîÅ restored 1:", regex.dfa.to_regex())

# –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è ‚Äî —Å–æ–∑–¥–∞—ë–º DFA –≤—Ä—É—á–Ω—É—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
tokens = to_postfix(insert_concat(tokenize("(a|bc)*|(a|bc)*ba(c)*")))
tree = SyntaxTree(tokens)
dfa = DFA(tree)  # –±–µ–∑ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏

dfa_min = DFAOptimizer(dfa).moore_minimize()
print("‚úÖ Moore dfa min:", dfa_min.to_regex())
print("üîÅ restored 2:", dfa.to_regex())

def test_restore():
    pattern = "(a|bc)*|(a|bc)*ba(c)*"



    # –†—É—á–Ω–æ–π DFA (–±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    tokens = to_postfix(insert_concat(tokenize(pattern)))
    tree = SyntaxTree(tokens)
    dfa = DFA(tree)
    dfa_opt = DFAOptimizer(dfa).minimize()

    restored1 = dfa.to_regex()
    print("‚úÖ to_regex –¥–æ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏:", restored1)

    # –ü–æ—Å–ª–µ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –ø–æ–ª–µ–π
    minimized = DFAOptimizer(dfa).minimize()
    minimized.alphabet = dfa.alphabet
    minimized.leaves = dfa.leaves
    minimized.terminal = dfa.terminal
    minimized.followpos = dfa.followpos

    restored2 = minimized.to_regex()
    print("‚úÖ to_regex –ø–æ—Å–ª–µ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ (–≤—Ä—É—á–Ω—É—é):", restored2)

    # –ß–µ—Ä–µ–∑ Regex.compile()
    regex = Regex(pattern).compile()
    restored3 = regex.dfa.to_regex()
    print("‚úÖ to_regex —á–µ—Ä–µ–∑ Regex.compile:", restored3)


    dfa_opt.leaves = dfa.leaves
    dfa_opt.followpos = dfa.followpos
    dfa_opt.terminal = dfa.terminal
    dfa_opt.alphabet = dfa.alphabet

    print("‚úÖ TO_REGEX (—Ä—É—á–Ω–æ–π DFA):", dfa_opt.to_regex())
   
    # –¢–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ Regex.compile()
    regex = Regex(pattern).compile()
    print("‚úÖ TO_REGEX (—á–µ—Ä–µ–∑ regex.dfa):", regex.dfa.to_regex())


if __name__ == "__main__":
    test_restore()