Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> NFS NAME path
Rule 2     path -> SLASH NAME more_path
Rule 3     more_path -> SLASH NAME more_path
Rule 4     more_path -> empty
Rule 5     empty -> <empty>

Terminals, with rules where they appear

NAME                 : 1 2 3
NFS                  : 1
SLASH                : 2 3
error                : 

Nonterminals, with rules where they appear

empty                : 4
more_path            : 2 3
path                 : 1
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . NFS NAME path

    NFS             shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> NFS . NAME path

    NAME            shift and go to state 3


state 3

    (1) start -> NFS NAME . path
    (2) path -> . SLASH NAME more_path

    SLASH           shift and go to state 5

    path                           shift and go to state 4

state 4

    (1) start -> NFS NAME path .

    $end            reduce using rule 1 (start -> NFS NAME path .)


state 5

    (2) path -> SLASH . NAME more_path

    NAME            shift and go to state 6


state 6

    (2) path -> SLASH NAME . more_path
    (3) more_path -> . SLASH NAME more_path
    (4) more_path -> . empty
    (5) empty -> .

    SLASH           shift and go to state 7
    $end            reduce using rule 5 (empty -> .)

    more_path                      shift and go to state 8
    empty                          shift and go to state 9

state 7

    (3) more_path -> SLASH . NAME more_path

    NAME            shift and go to state 10


state 8

    (2) path -> SLASH NAME more_path .

    $end            reduce using rule 2 (path -> SLASH NAME more_path .)


state 9

    (4) more_path -> empty .

    $end            reduce using rule 4 (more_path -> empty .)


state 10

    (3) more_path -> SLASH NAME . more_path
    (3) more_path -> . SLASH NAME more_path
    (4) more_path -> . empty
    (5) empty -> .

    SLASH           shift and go to state 7
    $end            reduce using rule 5 (empty -> .)

    more_path                      shift and go to state 11
    empty                          shift and go to state 9

state 11

    (3) more_path -> SLASH NAME more_path .

    $end            reduce using rule 3 (more_path -> SLASH NAME more_path .)

