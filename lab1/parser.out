Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> NFS NAME SLASH NAME SLASH rest
Rule 2     rest -> segment rest
Rule 3     rest -> empty
Rule 4     segment -> NAME
Rule 5     segment -> NAME SLASH
Rule 6     empty -> <empty>

Terminals, with rules where they appear

NAME                 : 1 1 4 5
NFS                  : 1
SLASH                : 1 1 5
error                : 

Nonterminals, with rules where they appear

empty                : 3
rest                 : 1 2
segment              : 2
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . NFS NAME SLASH NAME SLASH rest

    NFS             shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> NFS . NAME SLASH NAME SLASH rest

    NAME            shift and go to state 3


state 3

    (1) start -> NFS NAME . SLASH NAME SLASH rest

    SLASH           shift and go to state 4


state 4

    (1) start -> NFS NAME SLASH . NAME SLASH rest

    NAME            shift and go to state 5


state 5

    (1) start -> NFS NAME SLASH NAME . SLASH rest

    SLASH           shift and go to state 6


state 6

    (1) start -> NFS NAME SLASH NAME SLASH . rest
    (2) rest -> . segment rest
    (3) rest -> . empty
    (4) segment -> . NAME
    (5) segment -> . NAME SLASH
    (6) empty -> .

    NAME            shift and go to state 7
    $end            reduce using rule 6 (empty -> .)

    rest                           shift and go to state 8
    segment                        shift and go to state 9
    empty                          shift and go to state 10

state 7

    (4) segment -> NAME .
    (5) segment -> NAME . SLASH

    NAME            reduce using rule 4 (segment -> NAME .)
    $end            reduce using rule 4 (segment -> NAME .)
    SLASH           shift and go to state 11


state 8

    (1) start -> NFS NAME SLASH NAME SLASH rest .

    $end            reduce using rule 1 (start -> NFS NAME SLASH NAME SLASH rest .)


state 9

    (2) rest -> segment . rest
    (2) rest -> . segment rest
    (3) rest -> . empty
    (4) segment -> . NAME
    (5) segment -> . NAME SLASH
    (6) empty -> .

    NAME            shift and go to state 7
    $end            reduce using rule 6 (empty -> .)

    segment                        shift and go to state 9
    rest                           shift and go to state 12
    empty                          shift and go to state 10

state 10

    (3) rest -> empty .

    $end            reduce using rule 3 (rest -> empty .)


state 11

    (5) segment -> NAME SLASH .

    NAME            reduce using rule 5 (segment -> NAME SLASH .)
    $end            reduce using rule 5 (segment -> NAME SLASH .)


state 12

    (2) rest -> segment rest .

    $end            reduce using rule 2 (rest -> segment rest .)

