from NFSPathParser_sm import NFSPathParser_sm

class FSMWrapper:
    def __init__(self):
        self.buf = ""
        self.server = None
        self.accepted = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç –∏ —Å—Ç–∞—Ä—Ç—É–µ–º
        self.fsm = NFSPathParser_sm(self)
        self.fsm.enterStartState()

    def input(self, ch):
        print(f">>> input: '{ch}' | current state: {self.fsm.getState().getName()}")  # üîç Debug
     # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ FSM ‚Äî nfs –ø—Ä–æ—Ç–æ–∫–æ–ª
        if self.fsm.getState().getName() == "NFSPath.Start" and ch == 'n':
            self.fsm.n()
        elif self.fsm.getState().getName() == "NFSPath.Protocol_N" and ch == 'f':
            self.fsm.f()
        elif self.fsm.getState().getName() == "NFSPath.Protocol_F" and ch == 's':
            self.fsm.s()
        elif ch.isalpha():
            self.fsm.Letter(ch)
        elif ch.isdigit():
            self.fsm.Digit(ch)
        elif ch == ':':
            self.fsm.Colon()
        elif ch == '/':
            self.fsm.Slash()
        elif ch == '\0' or ch == '\n':
            self.fsm.EOS()
        else:
            self.fsm.Default()

    # –ú–µ—Ç–æ–¥—ã, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∞–≤—Ç–æ–º–∞—Ç–æ–º (–¥–µ–π—Å—Ç–≤–∏—è –∏–∑ .sm)
    def addtobuf(self, x): self.buf += x
    def clearbuf(self): self.buf = ""
    def recordServerName(self): self.server = self.buf
    def recordFirstDir(self): pass
    def recorDirPath(self): pass
    def validatePath(self): self.accepted = True
    def clearallbuf(self): self.buf = ""
    def Accept(self): self.accepted = True
